---
#===============================================================================
AWSTemplateFormatVersion: 2010-09-09
Description: |
  Allow lambda to terminate improper tagged ec2 instances
 
#==================================================
# Metadata
#==================================================
Metadata:
  License:
    Description: |
      Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 
      Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. A copy of the License is located at
 
          http://aws.amazon.com/apache2.0/
 
      or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

#==================================================
# Mappings
#==================================================
Mappings:
  Environment:
    TagResource:
      AppCode: "XXXX"
      PcCode: "YYYY"
  "XXXXXXXXXXXX": # AWS AccountX
      LambdaIamRoleArn: arn:aws:iam::XXXXXXXXXXXX:role/ZZZZZ
      LambdaName: XXXXXXXXXXXX-terminate-untagged-ec2
  "YYYYYYYYYYYY": # AWS AccountY
      LambdaIamRoleArn: arn:aws:iam::YYYYYYYYYYYY:role/ZZZZZ
      LambdaName: YYYYYYYYYYYY-terminate-untagged-ec2

#==================================================
# Parameters
#==================================================
Parameters:
  LambdaIamRoleArn:
    Description: |
      Arn for IAM role to allow lambda execute on your behalf
    Type: String
#==================================================
# Resources
#==================================================
Resources:
  #==================================================
  # Lambda function that is used for security group
  # auto-response.
  #==================================================
  TerminateUntaggedEc2Instances:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TerminateUntaggedEc2Instances
      Description: Terminate improper tagged ec2 instances
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !FindInMap ["Environment" , !Ref "AWS::AccountId" , LambdaIamRoleArn]
      Runtime: python3.6
      Timeout: 30
      Environment:
        Variables:
          USER_DELIMITER: ','
          USER_LIST: 'pipeline,pipeline'
      Tags:
        - Key: "App-code"
          Value: !FindInMap ["Environment" , "TagResource", "AppCode"]
        - Key: "PC-code"
          Value: !FindInMap ["Environment" , "TagResource", "PcCode"]
      Code:
        ZipFile: |
          import boto3
          import re, os

          # ignore resources that are provisioned by pipeline, jenkins, automation script, etc.
          DELIMITER = os.getenv('USER_DELIMITER') if os.getenv('USER_DELIMITER') else ','
          USER_LIST = os.getenv('USER_LIST').split(DELIMITER) if os.getenv('USER_LIST') else ['pipeline']

          def lambda_handler(event, context):
              # trigger by cloudtrail event
              user_arn = instances = event.get('detail').get('userIdentity').get('arn')
              instances = event.get('detail').get('responseElements').get('instancesSet').get('items')
              instances = filter(lambda instance: not is_created_by_pipeline(user_arn, USER_LIST) , instances)
              instance_info = list(map(lambda instance: 
                  {
                      'instance_id': instance.get('instanceId'),
                      'tags': instance.get('tagSet').get('items') if instance.get('tagSet') else []
                  }
              , instances))
              print('instance_info {}'.format(instance_info))
              ec2 = boto3.resource('ec2', region_name='ap-southeast-1')
              ec2_client = ec2.meta.client

              for instance in instance_info:
                  tags = instance.get('tags')
                  instance_id = instance.get('instance_id')
                  for tag in tags:
                      if tag.get('key') == 'PC-code':
                          pc_code = tag.get('value') 
                          if is_valid_pc_code(pc_code):
                              return
                  print('Terminate instance {}'.format(instance.get('instance_id')))
                  ec2.instances.filter(InstanceIds=[instance_id]).terminate()


          def is_valid_pc_code(pc_code):
              pattern = re.compile("^[A-Za-z0-9]{4}$")
              return pattern.match(pc_code)

          def is_created_by_pipeline(arn, excluded_user_list):
              if arn:
                  bankId = arn.rsplit('/',1)[1]
                  found = [username for username in excluded_user_list if bankId == username]
                  return len(found) > 0
              # kill instances anyway if not found 1bank in arn
              return False

  #==================================================
  # Scheduled CloudWatch rule to trigger the
  # revocation function. The events can be mofied as
  # desired.
  #==================================================
  TriggeredRuleForEc2Running:
    Type: AWS::Events::Rule
    Properties:
      Name: Ec2RunningTrigger
      Description: Responds to ec2 running (Cloudtrail) change events
      EventPattern:
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - RunInstances
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt TerminateUntaggedEc2Instances.Arn
          Id: TargetFunctionV1

  #==================================================
  # Permission that allows the CloudWatch service to
  # execute the Lambda function.
  #==================================================
  CloudWatchInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !Ref TerminateUntaggedEc2Instances
      SourceArn: !GetAtt TriggeredRuleForEc2Running.Arn 
      
